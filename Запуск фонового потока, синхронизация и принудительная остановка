В дизайнере формы
................................................................
private System.ComponentModel.BackgroundWorker backgroundWorker1;
[другие детали опущены]
................................................................

В теле класса FormSearch
................................................................
/*Синхронизирующий токен*/
private object lockToken = new object();

/*Синхронизирующий флаг: для режима поиска по тексту*/
private bool bFileReadInProgress = false;

/*Делегат для обработки файла: будет использоваться для входа в функцию анализа файла (при режиме поиска по тексту) в асинхронном режиме*/
 Action<FileInfo> fileAnalizeAsync;
 
[другие детали опущены]
................................................................


        //В конструкторе формы FormSearch
        public FormSearch(SearchMode searchID)
        {
            ...........................
	    //Инициализация воркера
            InitializeBackgroundWorker();
	    
	    //Регистрация обработчика файла (будет задействован в режиме поиска по тексту)
            fileAnalizeAsync = UpdateControls_ByText;
            ...........................
	          [другие детали опущены]
        }

        //Инициализация фонового потока
        private void InitializeBackgroundWorker()
        {
            //функция, с выполнения которой поток начинает свою работу
            backgroundWorker1.DoWork += new DoWorkEventHandler(backgroundWorker1_DoSearch);
            
            //функция, для сообщения прогресса поиска в первичный поток
            backgroundWorker1.ProgressChanged += new ProgressChangedEventHandler(backgroundWorker1_ShowSearchProgress);
            
            //функция, вызываемая после завершения backgroundWorker1_DoSearch
            backgroundWorker1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(backgroundWorker1_SearchDone);
            
            //Включение поддержки прекращения работы фонового потока и возможности сообщения результата поиска
            backgroundWorker1.WorkerReportsProgress = true;
            backgroundWorker1.WorkerSupportsCancellation = true;
        }

        //Работа фонового потока: поиск файлов и папок
        private void backgroundWorker1_DoSearch(object sender, DoWorkEventArgs e)
        {
		Monitor.Enter(lockToken); 		     //захватить синхронизирующий 
		
                SearchObject searchObj = new SearchObject(); //обьект для передачи в первичный поток
                Queue<string> queue = new Queue<string>();   //очередь директорий
                string currentPath = searchPath;	     //текущий путь поиска
                int amount = 0;				     //количество найденных файлов

                queue.Enqueue(searchPath);		     //поместить в очередь начальный путь

                do
                {
                    currentPath = queue.Dequeue(); //извлечь очередной путь из очереди
                    DirectoryInfo currentDirectory = new DirectoryInfo(currentPath); //создать на его основе типизированный объект директории


                    foreach (FileInfo file in GetNextFile(ref currentDirectory, userMask)) //для каждого файла в текущей директории
                    {
                        amount++;						//увеличить счетчик файлов
                        searchObj.currentSearchObject = searchTarget.File;	//пометить обьект поиска как файл
                        searchObj.File = file;					//сохранить ссылку на файл

                        Monitor.Pulse(lockToken);                               //разблокировать токен чтобы основной поток мог им завладеть
                        backgroundWorker1.ReportProgress(amount, searchObj);    //вернуться в основной поток и отобразить текущий файл
                        Monitor.Wait(lockToken);                                //ждать пока основной поток отобразит результаты
			
			/*После освобождения токена в фукнции ReportProgress поток поиска файлов возобновляет свою работу, однако,
			  если мы находимся в режиме поиска по тексту необходимо снова остановить поток поиска файлов и дать возможность
			  получить синхронизирующий токен потоку чтения конкретного файл и продолжить рабоут только когда чтение завершено.
			  
			  Вот как это выполнено: в режиме поиска по тексту до вызова функции чтения файла в функции ReportProgress 
			  флаг bFileReadInProgress устанвливается в значение true, асинхроно
			  (т.к. файл может быть большим и анализ в основном потоке остановит возможность взаимодействия с GUI) вызывается 
			  функция чтения файла, в контексте которой выполняется попытка получить синхронизирующий токен, а тем временем
			  управление возвращается в функцию  ReportProgress. В этот момент, поток поиска файлов еще ждет, а поток чтения файла еще не получил
			  токен т.к. в  функции ReportProgress токен еще не освобожден. После освобождения синхронизирующего токена сперва возобновляется работа
			  потока поиска файлов, но далее следует цикл, после входа в который (вход произойдет т.к. bFileReadInProgress установлен
			  в true) поток поиска файлов приостанавливается и освобождает токен, не расходуя при этом процессорное время во время выполнения 
			  другого потока. Поток чтения файла захватывает синхронизирующий токен, выполняет чтения файла не блокируя работу GUI-потока и 
			  после завершения сбрасывает флаг и освобождает синхронизирующий токен. Поток поиска файлов возобновляет свою работу и выходит из 
			  цикла ожидания, выполняя поиск следующего файла.
			  
			while(bFileReadInProgress)
                        {
                            /*Wait for read file thread*/
                            Monitor.Wait(lockToken);
                        }

                        if (backgroundWorker1.CancellationPending == true)      //если поступил сигнал о завершении фонового потока - останвоить его и завершить поиск
                        {
                            e.Cancel = true;
                            return;
                        }
                    }

                    foreach (var directory in GetNextDirectory(ref currentDirectory)) //для каждой директории в текущей директории
                    {
                        if (backgroundWorker1.CancellationPending == true)      //если поступил сигнал о завершении фонового потока - останвоить его и завершить поиск
                        {
                            e.Cancel = true;
                            return;
                        }

                        queue.Enqueue(directory.FullName);			//поместить директорию в очередь

                        searchObj.currentSearchObject = searchTarget.Path;	//пометить обьект поиска как путь
                        searchObj.CurrentPath = directory.FullName;		//сохранить имя директории

                        Monitor.Pulse(lockToken);                               //разблокировать токен чтобы основной поток мог им завладеть
                        backgroundWorker1.ReportProgress(amount, searchObj);    //вернуться в основной поток и отобразить текущую папку поиска
                        Monitor.Wait(lockToken);                                //ждать пока основной поток отобразит результаты
                    }

                } while (queue.Any()); //пока в очереди есть директории ожидающие рассмотрения

                 Monitor.Exit(lockToken); //освободить синхронизирующий токен
        }


        private void backgroundWorker1_ShowSearchProgress(object sender, ProgressChangedEventArgs e)
        {
            	Monitor.Enter(lockToken); //захватить токен
		
                SearchObject so = (SearchObject)e.UserState;                 //извлечь обьект поиска

                //Если передан файл
                if(so.currentSearchObject == searchTarget.File)
                {
                    //Извлечь файл и проанализировать его согласно текущему режиму поиска
                    FileInfo currFile = ((SearchObject)e.UserState).File;

                    switch (sMode)
                    {
                        case SearchMode.byManual:
                            UpdateControls_ByManual(ref currFile);
                            break;
                        case SearchMode.ByCategory:
                            UpdateControls_ByCategory(ref currFile);
                            break;
                        case SearchMode.byText:
                            bFileReadInProgress = true; //сигнал для потока поиска файлов о том, что начнется чтения файла (поток чтения файлов будет снова приостановлен после возобновления своей работы, давая возможность сначала отработать потоку чтения файла, а сам ждет)
                            fileAnalizeAsync.BeginInvoke(currFile, null, null); //Запустить анализ файла асинхронно
                            break;
                    }
                }
                //Если передана директория
                if(so.currentSearchObject == searchTarget.Path)
                {
                    //Извлечь путь и отобразить его
                    string fullPath = so.CurrentPath;

                    IntermediatePath.Text = fullPath.Length >= MAX_DIRECTORY_LENGTH ?
                                            string.Format("Путь: {0}", fullPath.Substring(0, MAX_DIRECTORY_LENGTH - 1)) :
                                            string.Format("Путь: {0}", fullPath);
                }

                Monitor.Pulse(lockToken); //Освободить токен для фонового потока (поиск файлов продолжится)
            }
        }

        //Когда поиск завершен
        private void backgroundWorker1_SearchDone(object sender, RunWorkerCompletedEventArgs e)
        {
            UnlockControls();   //разблокировать элементы управления

            //Сообщить о том, что поиск завершен (в label и модальным окном)
            IntermediatePath.Text = "Поиск завершен";
            MessageBox.Show(this, "Поиск завершен", "Инфо", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        //Получение очередной директории в текущей
        private IEnumerable<DirectoryInfo> GetNextDirectory(ref DirectoryInfo dir)
        {
            try
            {
                return dir.EnumerateDirectories();
            }
            catch(Exception problemDirEx)
            {
                using (StreamWriter sw = new StreamWriter(pathToFileErrorLogs)) //обновить журнал ошибок доступа к директориям/файлам
                {
                    sw.WriteLine("[DIR Error " + DateTime.Now.ToLocalTime() + "]: " + problemDirEx.Message);
                }
            }

            return Enumerable.Empty<DirectoryInfo>();
        }

        //Получение очередного файла в текущей директории
        private IEnumerable<FileInfo> GetNextFile(ref DirectoryInfo dir, string sFormat)
        {
            try
            {
                return dir.EnumerateFiles(sFormat);
            }
            catch(Exception problemFileEx)
            {
                using (StreamWriter sw = new StreamWriter(pathToFileErrorLogs)) //обновить журнал ошибок доступа к директориям/файлам
                {
                    sw.WriteLine("[FILE Error " + DateTime.Now.ToLocalTime() + "]: " + problemFileEx.Message);
                }
            }

            return Enumerable.Empty<FileInfo>();
        }

        //Способы остановки фонового потока
        //1.    Обработка попыток закрытия окна*/
        private void FormSearch_FormClosing(object sender, FormClosingEventArgs e)
        {
            /*Обработка двух случаев: поиск еще не начался или уже завершен, поиск в процессе*/

            if (!backgroundWorker1.IsBusy)                                //если поиск не в процессе
            {
                e.Cancel = false;                                         //разрешается закрытие формы
                this.RestoreFormParams();                                 //обнулить статические параметры формы
            }
            else
            {
                e.Cancel = true;                                          //не разрешается закрытие формы
                if (backgroundWorker1.WorkerSupportsCancellation == true) //если отмена предусмотрена
                    backgroundWorker1.CancelAsync();                      //завершить фоновой поток
            } 
        }

        //2. Завершение по нажатию на кнопку
        private void buttonAbortSearch_MouseClick(object sender, MouseEventArgs e)
        {
            FormClosingEventArgs eClose = new FormClosingEventArgs(CloseReason.UserClosing, true);
            FormSearch_FormClosing(this, eClose);
        }
	
	
	//Обновление формы при поиске по маске
	private void UpdateControls_ByManual(ref FileInfo curr_file)
        {
            /*Обновить список и текстовые поля*/
            UdpateSearchForm(curr_file, ++fileCounter);
        }

        //Обновление формы при поиске по категориям
        private void UpdateControls_ByCategory(ref FileInfo curr_file)
        {
            if(!categorySearchAllFilesChecked)
            {
                if (curr_file.FileExtensionRequired(ref listOfRequiredExtensions) == false)
                    return;
            }

            UdpateSearchForm(curr_file, ++fileCounter);
        }

        //Обновление формы при поиске по тексту
        private void UpdateControls_ByText(FileInfo curr_file)
        {
            Monitor.Enter(lockToken); //захватить синхронизирующий токен
           if (curr_file.FileExtensionRequired(ref listOfRequiredExtensions) &&
               curr_file.ContainRequiredString(ref requiredString))
           {
	   	//Окно в первичный поток: добавить файл в таблицу, если он прошел обе проверки
               this.Invoke(new Action(() =>
                {
                     UdpateSearchForm(curr_file, ++fileCounter);
                }));
           }
	    
	    //Чтение завершено: сбросить флаг, чтения освободить токен. В результате чего поток поиска файлов возобновит свою работу
            bFileReadInProgress = false;
            Monitor.Pulse(lockToken);
            Monitor.Exit(lockToken);
        }
	
	//Функция обновления формы
	private void UdpateSearchForm(FileInfo curr_file, int counter)
        {
            /*Обновить список и текстовые поля*/
            string pathText;
            try
            {
                pathText = curr_file.Directory.Root + curr_file.Directory.Name;
            }
            catch (Exception ignoreBadDirectoryLength)
            {   /*Игнорировать директории с длинными именами (больше 248 символов)*/
                return;
            }

            /*Добавить информацию о поиске в текстовые поля*/
            IntermediatePath.Text = pathText.Length >= MAX_DIRECTORY_LENGTH ?
                string.Format("Путь: {0}", pathText.Substring(0, MAX_DIRECTORY_LENGTH - 1)) :
                string.Format("Путь: {0}", pathText);
            IntermediateAmount.Text = string.Format("Количество: {0}", counter.ToString());

            /*Добавить информацию о файле в список*/
            var item1 = new ListViewItem(new[]
            {
                                curr_file.Directory.ToString(),
                                curr_file.Name,
                                (curr_file.Length / 1024).ToString(),
                                curr_file.Extension,
                                curr_file.CreationTime.ToShortDateString()
            });
            listView1.Items.Add(item1);
        }
